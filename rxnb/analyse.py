from rdkit import Chem
import numpy as np
pt = Chem.GetPeriodicTable()
class G16LOG():
    def __init__(self,log_file,types=['sp']):
        '''
        Parser for G16 log files, designed to parse '.log' files generated by G16 to extract single-point energies, optimized structures, or to determine if the optimized structures represent valid stationary points.
        
        Parameters
        ----------
        log_file : string
            Path to g16 .log file
        types : list
            List of G16 tasks, support single point energy (sp), geometry optimization (opt) and frequency calculation (freq).
            
        Returns
        -------
        G16 log parser object.
        '''
        self.log_file = log_file
        self.types = types
        with open(self.log_file,'r') as fr:
            self.loginf = fr.readlines()
        if not self.is_done():
            raise ValueError('G16 procedure not finished or failed')
    def is_done(self):
        '''
        Check if the G16 program has terminated normally.
        
        Returns
        -------
        is_done : bool
            if the G16 program has terminated normally or not.
        '''
        return 'Normal termination of Gaussian' in self.loginf[-1]
    
    def read_energy(self):
        '''
        Read single point energy (last one will return if optimization task is performed)
        
        Returns
        -------
        sp_energy : float
            single point energy
        '''
        assert 'sp' in self.types, "No 'sp' in `types` parameter"
        sp_energy_lst = []
        for line in self.loginf:
            if 'SCF Done:' in line:
                sp_energy_lst.append(eval(line.strip().split()[4]))
        if sp_energy_lst == []:
            raise ValueError('No single point energy found')
        else:
            self.sp_energy = sp_energy_lst[-1]
            return sp_energy_lst[-1]
    
    def read_opted_geom(self):
        '''
        Read optimized molecular geometry
        
        Parameters
        ----------
        
        Returns
        -------
        atom_types : numpy.ndarray
            ndarray of atom types
        coords : numpy.ndarray
            ndarray of coordinates
        '''
        assert 'opt' in self.types, "No 'opt' in `types` parameter"
        coord_start_index_list = []
        for i,line in enumerate(self.loginf):
            if 'NAtoms=' in line:
                atom_num = eval(line.split()[1])
            if 'Standard orientation' in line:
                coord_start_index_list.append(i+5)
        coord_string = self.loginf[coord_start_index_list[-1]:coord_start_index_list[-1]+atom_num]
        coords = np.array([[eval(item.strip().split()[3]),eval(item.strip().split()[4]), eval(item.strip().split()[5])] for item in coord_string])
        atom_types = np.array([pt.GetElementSymbol(eval(item.split()[1])) for item in coord_string])
        self.coords = coords
        self.atom_types = atom_types
        return atom_types, coords
    
    def is_valid_statpt(self,tgt_type='normal'):
        assert 'freq' in self.types, "No 'freq' in `types` parameter"
        assert tgt_type in ['normal','ts'], "`tgt_type` should be 'normal' or 'ts'"
        # TODO